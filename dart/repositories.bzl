"""Declare runtime dependencies.

These are needed for local dev, and users must install them as well.
See https://docs.bazel.build/versions/main/skylark/deploying.html#dependencies
"""

load("@bazel_tools//tools/build_defs/repo:http.bzl", _http_archive = "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load("//dart/private:toolchains_repo.bzl", "PLATFORMS", "toolchains_repo")
load("//dart/private:versions.bzl", "TOOL_VERSIONS")

def http_archive(name, **kwargs):
    maybe(_http_archive, name = name, **kwargs)

# WARNING: Any changes to this function is likely a BREAKING CHANGE for users.
def rules_dart_dependencies():
    # The minimal version of bazel_skylib we require.
    http_archive(
        name = "bazel_skylib",
        sha256 = "cd55a062e763b9349921f0f5db8c3933288dc8ba4f76dd9416aac68acee3cb94",
        urls = [
            "https://github.com/bazelbuild/bazel-skylib/releases/download/1.5.0/bazel-skylib-1.5.0.tar.gz",
            "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.5.0/bazel-skylib-1.5.0.tar.gz",
        ],
    )

########
# Remaining content of the file is only used to support toolchains.
########
_DOC = "Fetch external tools needed for dart toolchain"
_ATTRS = {
    "version": attr.string(
        mandatory = True,
        values = TOOL_VERSIONS.keys(),
    ),
    "platform": attr.string(
        mandatory = True,
        values = PLATFORMS.keys(),
    ),
}

def _dart_repo_impl(ctx):
    # See: https://dart.dev/get-dart/archive.
    # Example: https://storage.googleapis.com/dart-archive/channels/stable/release/3.3.1/sdk/dartsdk-macos-arm64-release.zip.
    url = "https://storage.googleapis.com/dart-archive/channels/stable/release/%s/sdk/dartsdk-%s-release.zip" % (
        ctx.attr.version,
        ctx.attr.platform,
    )

    ctx.download_and_extract(
        url = url,
        integrity = TOOL_VERSIONS[ctx.attr.version][ctx.attr.platform],
        stripPrefix = "dart-sdk",
    )

    build_content = """# Generated by dart/repositories.bzl.
load("@dev_lurey_rules_dart//dart:toolchain.bzl", "dart_toolchain")

dart_toolchain(
    name = "dart_toolchain",
    dart_bin = select({
        "@bazel_tools//src/conditions:host_windows": ":bin/dart.exe",
        "//conditions:default": ":bin/dart",
    }),
)
"""

    # Base BUILD file for this repository.
    ctx.file("BUILD.bazel", build_content)

dart_repositories = repository_rule(
    _dart_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

# Wrapper macro around everything else, this is the primary API.
def dart_register_toolchains(name, **kwargs):
    """Convenience macro for users which does typical setup.

    - Creates a repository for each built-in platform (i.e. "dart_macos_arm64")
      which is lazily fetched when needed for that platform.
    - TODO: Create a convenience repository for the host platform ("dart_host").
    - Create a repository exposing toolchains for each platform ("dart_platforms").
    - Register a toolchain pointing at each platform.

    Users can avoid this macro and do the steps themselves if they want more control.

    Args:
        name: base name for all created repos, like "dart_3.3.1".
        **kwargs: passed to each dart_repositories call.
    """
    for platform in PLATFORMS.keys():
        dart_repositories(
            name = "%s_%s" % (name, platform),
            platform = platform,
            **kwargs
        )
    toolchains_repo(
        name = "%s_toolchains" % name,
        user_repository_name = name,
    )
